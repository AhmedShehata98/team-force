generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int    @id @default(autoincrement())
  name      String
  ownerName String
  bio       String @db.VarChar(255)

  // العلاقة مع الاشتراك (Subscription)
  subscription Subscription? @relation("CompanySubscription")

  users    User[]    @relation("CompanyUsers")
  projects Project[]

  createdAt   DateTime      @default(now())
  Transaction Transaction[]
  Invitation  Invitation[]
}

model User {
  id              Int           @id @default(autoincrement()) // Primary Key
  name            String // اسم المستخدم
  email           String        @unique // البريد الإلكتروني
  role            UserRole // "Admin", "Team Leader", "Member"
  password        String
  skills          String[]
  companyId       Int?
  company         Company?      @relation("CompanyUsers", fields: [companyId], references: [id])
  joinedAt        DateTime      @default(now())
  teams           Team[]        @relation("TeamMembers")
  managedProjects Project[]     @relation("ManagedProjects")
  Team            Team[]
  Task            Task[]
  TeamMembers     TeamMembers[]
}

model Invitation {
  id        Int              @id @default(autoincrement())
  email     String           @unique
  companyId Int
  company   Company          @relation(fields: [companyId], references: [id])
  role      UserRole
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  token     String           @unique
  expiresAt DateTime
}

model Project {
  id          Int           @id @default(autoincrement()) // Primary Key
  name        String // اسم المشروع
  description String? // وصف المشروع
  startDate   DateTime // تاريخ البدء
  endDate     DateTime? // تاريخ الانتهاء (اختياري)
  status      ProjectStatus @default(PENDING)
  companyId   Int // الشركة المالكة
  company     Company       @relation(fields: [companyId], references: [id])
  teams       Team[] // الفرق المرتبطة بالمشروع
  managerId   Int // معرف مدير المشروع
  manager     User          @relation(fields: [managerId], references: [id], name: "ManagedProjects")
}

model Team {
  id          Int           @id @default(autoincrement()) // Primary Key
  name        String // اسم الفريق
  description String?       @db.VarChar(255)
  projectId   Int // المشروع المرتبط
  project     Project       @relation(fields: [projectId], references: [id])
  leaderId    Int // قائد الفريق
  leader      User          @relation(fields: [leaderId], references: [id])
  members     User[]        @relation("TeamMembers") // أعضاء الفريق
  tasks       Task[] // المهام المرتبطة بالفريق
  TeamMembers TeamMembers[]
}

model TeamMembers {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   Int
  role     TeamRole
  joinedAt DateTime @default(now())
}

model Task {
  id          Int        @id @default(autoincrement()) // Primary Key
  title       String // عنوان المهمة
  description String? // وصف المهمة
  assignedTo  Int // المستخدم الذي تم إسناد المهمة إليه
  assignee    User       @relation(fields: [assignedTo], references: [id])
  teamId      Int // الفريق المرتبط
  team        Team       @relation(fields: [teamId], references: [id])
  deadline    DateTime // موعد التسليم
  status      TaskStatus @default(PENDING)
}

model Subscription {
  id        Int     @id @default(autoincrement())
  companyId Int     @unique
  company   Company @relation("CompanySubscription", fields: [companyId], references: [id])

  plan      String
  startDate DateTime @default(now())
  endDate   DateTime
  isActive  Boolean  @default(true)
}

model Plan {
  id          Int           @id @default(autoincrement()) // Primary Key
  name        String        @unique // "Basic", "Standard", "Premium"
  price       Float // السعر الشهري
  maxUsers    Int // أقصى عدد للمستخدمين
  maxProjects Int // أقصى عدد للمشاريع
  maxTeams    Int // أقصى عدد للفرق
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Transaction {
  id        Int               @id @default(autoincrement()) // Primary Key
  companyId Int // الشركة المرتبطة
  company   Company           @relation(fields: [companyId], references: [id])
  planId    Int // الخطة المشتركة
  plan      Plan              @relation(fields: [planId], references: [id])
  amount    Float // المبلغ المدفوع
  date      DateTime          @default(now()) // تاريخ المعاملة
  status    TransactionStatus @default(Pending)
}

// model Company {
//   id          Int       @id @default(autoincrement())
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   name        String    @unique
//   description String    @db.VarChar(255)
//   members     User[]
//   projects    Project[]
//   teams       Team[]
// }

// model User {
//   id             Int             @id @default(autoincrement())
//   name           String
//   email          String          @unique
//   password       String
//   role           UserRole        @default(ADMIN)
//   skills         String[]
//   company        Company?        @relation(fields: [companyId], references: [id])
//   companyId      Int?
//   tasks          UserTask[]
//   projectLeaders ProjectLeader[]
//   TeamMember     TeamMember[]
// }

// model UserTask {
//   id     Int  @id @default(autoincrement())
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
//   task   Task @relation(fields: [taskId], references: [id])
//   taskId Int
// }

// model Project {
//   id            Int            @id @default(autoincrement())
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime       @updatedAt
//   name          String
//   description   String
//   deadline      DateTime
//   status        ProjectStatus  @default(INACTIVE)
//   company       Company        @relation(fields: [companyId], references: [id])
//   companyId     Int
//   teams         Team[]
//   projectLeader ProjectLeader?
// }

// model ProjectLeader {
//   id        Int     @id @default(autoincrement())
//   leader    User    @relation(fields: [leaderId], references: [id])
//   leaderId  Int
//   project   Project @relation(fields: [projectId], references: [id])
//   projectId Int     @unique
// }

// model Team {
//   id          Int          @id @default(autoincrement())
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt
//   name        String
//   description String
//   company     Company      @relation(fields: [companyId], references: [id])
//   companyId   Int
//   project     Project      @relation(fields: [projectId], references: [id])
//   projectId   Int
//   tasks       TeamTask[]
//   members     TeamMember[]
// }

// model TeamTask {
//   id     Int  @id @default(autoincrement())
//   team   Team @relation(fields: [teamId], references: [id])
//   teamId Int
//   task   Task @relation(fields: [taskId], references: [id])
//   taskId Int
// }

// model Task {
//   id          Int        @id @default(autoincrement())
//   title       String
//   description String?
//   dueDate     DateTime?
//   status      TaskStatus @default(PENDING)
//   createdAt   DateTime   @default(now())
//   updatedAt   DateTime   @updatedAt
//   teamTasks   TeamTask[]
//   userTasks   UserTask[]
// }

enum UserRole {
  ADMIN
  TEAM_LEADER
  MEMBER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}

enum TeamRole {
  LEADER
  MEMBER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  TESTING
}

enum ProjectStatus {
  IN_PROGRESS
  PENDING
  COMPLETED
}

enum TransactionStatus {
  Paid
  Pending
  Failed
}
